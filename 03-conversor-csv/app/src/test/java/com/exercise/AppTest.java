/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.exercise;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class AppTest {
  private static final List<String> ENTRIES_SP =
      Arrays.asList("Nome completo,Data de nascimento,Email,CPF",
          "marcus lima,05/03/1982,marcus@gmail.com,06041586455",
          "ananda andrade,20/03/1992,ananda@gmail.com,06041586455");

  private static final List<String> ENTRIES_RJ =
      Arrays.asList("Nome completo,Data de nascimento,Email,CPF",
          "pipoca,06/06/2019,pipoca@gmail.com,00000000000",
          "pudim,06/06/2019,pudim@gmail.com,11111111111");

  private static final List<String> OUTPUT_SP =
      Arrays.asList("Nome completo,Data de nascimento,Email,CPF",
          "MARCUS LIMA,1982-03-05,marcus@gmail.com,060.415.864-55",
          "ANANDA ANDRADE,1992-03-20,ananda@gmail.com,060.415.864-55");

  private static final List<String> OUTPUT_RJ =
      Arrays.asList("Nome completo,Data de nascimento,Email,CPF",
          "PIPOCA,2019-06-06,pipoca@gmail.com,000.000.000-00",
          "PUDIM,2019-06-06,pudim@gmail.com,111.111.111-11");

  private static final File pathTest = new File("./test/");
  private static final File entriesFolder = new File(pathTest, "entries/");
  private static final File outputFolder = new File(pathTest, "output/");

  private static void createFileCsv(File folder, String name, List<String> rows)
      throws IOException {

    FileWriter writer = new FileWriter(folder + "/" + name);

    try (BufferedWriter buffer = new BufferedWriter(writer)) {

      for (String row : rows) {
        buffer.write(row + "\n");
        buffer.flush();
      }

      buffer.close();
      writer.close();
    }
  }

  private static List<String> filesNames(File folder) {
    List<String> listFile = new ArrayList<>();

    for (File file : folder.listFiles()) {
      listFile.add(file.getName());
    }

    return listFile;
  }

  private static List<String> loadContent(File folder, String name) throws IOException {
    List<String> listContent = new ArrayList<>();

    File file = new File(folder, name);
    FileReader reader = new FileReader(file);

    try (BufferedReader buffer = new BufferedReader(reader)) {
      String content = buffer.readLine();

      while (content != null) {
        listContent.add(content);
        content = buffer.readLine();
      }

      buffer.close();
      reader.close();
    }

    return listContent;
  }

  @BeforeAll
  public static void before() throws IOException {
    entriesFolder.mkdirs();

    createFileCsv(entriesFolder, "sp.csv", ENTRIES_SP);
    createFileCsv(entriesFolder, "rj.csv", ENTRIES_RJ);

    App conversor = new App();
    conversor.converterPasta(entriesFolder, outputFolder);
  }

  @AfterAll
  public static void after() throws IOException {

    for (File folder : pathTest.listFiles()) {
      for (File file : folder.listFiles()) {
        file.delete();
      }
    }

    entriesFolder.delete();
    outputFolder.delete();

    pathTest.delete();
  }

  @Test
  @DisplayName("1 - Verifica se a pasta de saídas contém os mesmos arquivos da pasta de entradas")
  void testFoldersContent() {
    assertEquals(filesNames(entriesFolder), filesNames(outputFolder));
  }

  @Test
  @DisplayName("2 - Verifica o conteúdo dos arquivos das pastas de entradas e saídas")
  void testFilesContent() throws IOException {
    List<String> content_sp = loadContent(outputFolder, "sp.csv");
    List<String> content_rj = loadContent(outputFolder, "rj.csv");

    assertEquals(OUTPUT_SP, content_sp);
    assertEquals(OUTPUT_RJ, content_rj);
  }
}
